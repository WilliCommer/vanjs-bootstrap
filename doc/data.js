window.doc_data = {"project":{"title":"vanjs-bootstrap","brandImage":"img/form-lib.svg","brandLink":"#home","checkLinks":true,"copyImages":true,"createMdDoc":true,"extLinkIcon":true,"imageClass":"img-fluid mx-auto my-4 d-block border rounded shadow p-3 mb-5 bg-body","links":[]},"markdown":{"custominput":"# Custom Input\r\n\r\nThis example shows how to build a custom input control and register it as type 'align' for [FormBuilder](#formbuilder).\r\n\r\n\r\n### AlignInput Source\r\n\r\n```javascript\r\nimport van from 'vanjs-core';\r\nimport {Button} from 'vanjs-bootstrap';\r\n\r\n\r\n// const t = i18n.tPath('align-input');        // use current language\r\nconst t = t=>t;                                // use dummy translate\r\n\r\nconst {svg, path} = van.tagsNS(\"http://www.w3.org/2000/svg\");\r\n\r\n// define button props\r\nconst LEFT = {\r\n    value:      'left',\r\n    title:      'align left',\r\n    icon:       svg({width: \"1em\", height: \"1em\", viewBox: \"0 0 448 512\", stroke:\"currentColor\", fill:\"currentColor\"},\r\n        path({d: \"M288 64c0 17.7-14.3 32-32 32H32C14.3 96 0 81.7 0 64S14.3 32 32 32H256c17.7 0 32 14.3 32 32zm0 256c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H256c17.7 0 32 14.3 32 32zM0 192c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 448c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z\"})\r\n    ),\r\n}\r\n\r\nconst CENTER = {\r\n    value:      'center',\r\n    title:      'align center',\r\n    icon:       svg({width: \"1em\", height: \"1em\", viewBox: \"0 0 448 512\", stroke:\"currentColor\", fill:\"currentColor\"},\r\n        path({d: \"M352 64c0-17.7-14.3-32-32-32H128c-17.7 0-32 14.3-32 32s14.3 32 32 32H320c17.7 0 32-14.3 32-32zm96 128c0-17.7-14.3-32-32-32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H416c17.7 0 32-14.3 32-32zM0 448c0 17.7 14.3 32 32 32H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H32c-17.7 0-32 14.3-32 32zM352 320c0-17.7-14.3-32-32-32H128c-17.7 0-32 14.3-32 32s14.3 32 32 32H320c17.7 0 32-14.3 32-32z\"})\r\n    ),\r\n}\r\n\r\nconst RIGHT = {\r\n    value:      'right',\r\n    title:      'align right',\r\n    icon:       svg({width: \"1em\", height: \"1em\", viewBox: \"0 0 448 512\", stroke:\"currentColor\", fill:\"currentColor\"},\r\n        path({d: \"M448 64c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32zm0 256c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32zM0 192c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 448c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z\"})\r\n    ),\r\n}\r\n\r\nconst JUSTIFY = {\r\n    value:      'justify',\r\n    title:      'align justify',\r\n    icon:       svg({width: \"1em\", height: \"1em\", viewBox: \"0 0 448 512\", stroke:\"currentColor\", fill:\"currentColor\"},\r\n        path({d: \"M448 64c0-17.7-14.3-32-32-32H32C14.3 32 0 46.3 0 64S14.3 96 32 96H416c17.7 0 32-14.3 32-32zm0 256c0-17.7-14.3-32-32-32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H416c17.7 0 32-14.3 32-32zM0 192c0 17.7 14.3 32 32 32H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H32c-17.7 0-32 14.3-32 32zM448 448c0-17.7-14.3-32-32-32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H416c17.7 0 32-14.3 32-32z\"})\r\n    ),\r\n}\r\n\r\n// validate function\r\nconst isValidValue = (value) => [LEFT.value, CENTER.value, RIGHT.value,JUSTIFY.value].includes(value);\r\n\r\n\r\n// the custom align control\r\n\r\nexport default function AlignInput ({value, bsSize, class: clas, style, color=\"primary\", ...props}) {\r\n\r\n    const type = 'textalign';   // input type\r\n\r\n    var select = {\r\n        left:   van.state(),\r\n        right:  van.state(),\r\n        center: van.state(),\r\n        justify:van.state()\r\n    }\r\n    const setSelect = value => Object.keys(select).forEach( k => select[k].val = k !== value); \r\n\r\n    if (!isValidValue(value)) value = 'left'; // default\r\n    setSelect(value);\r\n\r\n    // setup bootstrap control frame\r\n    var divProps = {\r\n        className:  () => {           // merge className\r\n            let res = \"d-flex flex-row form-control\"; \r\n            if(van.val(bsSize)) res += ' form-control-' + van.val(bsSize);\r\n            if(van.val(clas)) res += ' ' + van.val(clas);\r\n            return res;\r\n        },\r\n        style: () => {                   // merge style\r\n            let res = \"max-width: max-content\";\r\n            if(van.val(style)) res += '; ' + van.val(style);\r\n            return res;\r\n        }\r\n    };\r\n\r\n    // setup button props\r\n    const Btn = (param) => Button({\r\n        bsSize,\r\n        class: \"py-1 px-2 me-1\",\r\n        onclick: () => {\r\n            props.oninput({\r\n                target: {\r\n                    name:   props.name,\r\n                    type,\r\n                    value:  param.value\r\n                }                \r\n            });\r\n            setSelect(param.value);\r\n        },\r\n        color,\r\n        outline: select[param.value],\r\n        title:  t(param.title)\r\n    }, param.icon);\r\n    \r\n    // return component\r\n    return van.tags.div({...divProps},\r\n        Btn(LEFT), Btn(RIGHT), Btn(CENTER), Btn(JUSTIFY),\r\n    )\r\n}\r\n\r\n```\r\n\r\n### Demo Source\r\n\r\n```javascript\r\nimport van from 'vanjs-core';\r\nimport {FormBuilder, typeMap} from 'vanjs-bootstrap';\r\nimport AlignInput from './align-input';\r\n\r\nconst {div, h3, h5} = van.tags;\r\n\r\ntypeMap.set('align', AlignInput);  // register AlignInput as type 'align';\r\n\r\nexport default function demo () {\r\n\r\n    const state = {\r\n        bsSize: van.state(''),\r\n        color:  van.state('primary'),\r\n        align:  van.state('left'),\r\n    }\r\n\r\n    const fb = FormBuilder(); // create builder\r\n\r\n    fb.onChange( (name,value) => {state[name].val = value} );\r\n\r\n    fb.addRow(\"m-2\");\r\n    fb.add({label: 'bsSize', name: 'bsSize', type: 'radioselect', cols: \"2 4\", bsSize: 'sm',\r\n        options: [['none',''],'sm','lg'], inline: true\r\n    });\r\n    fb.add({label: 'color', name: 'color', type: 'select', cols: \"2 4\", bsSize: 'sm',\r\n        options: 'primary,secondary,success,danger,warning,info,light,dark,link',\r\n    });\r\n\r\n    fb.addRow(\"m-2\");\r\n    fb.add({label: 'Align', name: 'align', type: 'align', cols: \"2 5\", bsSize: state.bsSize, color: state.color});\r\n\r\n    return div(\r\n        h3('Align Demo'),\r\n        div({class: \"row my-4 border rounded-2\"},\r\n            fb.dom,\r\n            h5(() => `align value: ${state.align.val}`)\r\n        ),\r\n    )\r\n}\r\n\r\n```\r\n","formbuilder":"# FormBuilder\r\n\r\n> ##### `export function FormBuilder (dom)`\r\n\r\nThe FormBuilder inherits from [FormController](#formcontroller). With it you can easily create forms in Bootstrap grid format.\r\n\r\n- Create a FormBuilder with `function FormBuilder(dom)`\r\n- Start a new row with `addRow(class)`\r\n- Finish a row with `addRow(null)` or `addRow(class)` for next row\r\n- Add a form group with label and input control with `add(props)`\r\n- Add the form into dom tree with variable `dom`\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar fb = FormBuilder();\r\nvar fbValues = van.state({});\r\nfb.onChange( () => {fbValues.val = {...fb.values}} );\r\n\r\nfb.addRow(\"m-2 p-2 border border-primary rounded-2 \");\r\nfb.add({label: 'Name 1', name: 'name1', cols: \"2 4\"});\r\nfb.add({label: 'Name 2', name: 'name2', cols: \"2 4\"});\r\n\r\n...\r\n\r\nreturn div({class: 'row p-2 border'},\r\n    fb.dom,  // form dom\r\n    div({class: \"row mt-1\"},\r\n        p(JSON.stringify(fbValues.val),  // show form values\r\n        ()=>fb.emitChange(),    // effect to call fb.onChange to show initial values\r\n    ),\r\n)\r\n```\r\n\r\n<details>\r\n  <summary>Show FormBuilder Code</summary>\r\n\r\n## FormBuilder Code\r\n\r\n```javascript\r\nexport function FormBuilder (dom) {\r\n    var fc = FormController();\r\n    var self = {\r\n        ...fc,\r\n        dom: dom ?? van.tags('form'),\r\n        row: null,\r\n        add (props, dom) {\r\n            let {name, value, oninput, ...rest} = props;\r\n            let args = {...rest, ...fc.args({name, value, oninput}) };\r\n            van.add(dom ?? self.row ?? self.dom, FormGroup(args));\r\n        },\r\n        addRow (arg) {\r\n            if(arg === null) return self.row=null;\r\n            self.row = div({class: \"row\" + (arg ? ' '+arg : '')});\r\n            van.add(self.dom, self.row);\r\n            return self.row;\r\n        }\r\n    }\r\n    return self;\r\n}\r\n```\r\n\r\n</details>\r\n\r\n\r\n","formcontroller":"# FormController\r\n\r\n> ##### `export function FormController ({values})`\r\n\r\nFunction FormController creates a simple object to handle multiple inputs.\r\n\r\n- create a FormController object  \r\n  `var fc = FormController()`  \r\n- assign its *handleInput* to your controls *oninput* event\r\n- subscribe changes with *onChange* which returns a unsubscribe function\r\n- use *args* to inject properties into your control  \r\n  `input({type: \"text\", ...fc.args({name: 'name', value: 'init'})})` will allso set `oninput`  \r\n  or omit *name* and *value* for auto generation  \r\n  `input({type: \"number\", ...fc.args()})`  \r\n  ⇨ `input({type: \"number\", name: \"v1\", value: \"\", oninput: fc.handleInput})`  \r\n- all values are collected in object *values* as `name: value`\r\n\r\n<details>\r\n  <summary>Show code</summary>\r\n\r\n## FormController Code\r\n\r\n```javascript\r\nexport function FormController ({values} = {}) {\r\n    const isVanState = v => van.val(v) !== v;\r\n    var listeners = [];\r\n    var ccount = 1;\r\n    var self = {\r\n        values: {...(values ?? {})},\r\n        onChange (func) { listeners.push(func); return () => self.offChange(func); },\r\n        offChange (func) { listeners = listeners.filter( f => f !== func) },\r\n        emitChange (name, value) { listeners.forEach( f => f(name, value)) },\r\n        handleInput (event) {\r\n            let {name, value} = event.target;\r\n            if (isVanState(self.values[name])) {\r\n                self.values[name].val = value;\r\n            } else {\r\n                self.values[name] = value;\r\n            }\r\n            self.emitChange( name, value );\r\n        },\r\n        args (args = {}) {\r\n            let {name = `v${ccount++}`, value, oninput = self.handleInput} = args;\r\n            value = value ?? self.values[name] ?? '';\r\n            self.values[name] = value;\r\n            return {name, value, oninput}\r\n        }\r\n    }\r\n    return self;\r\n}\r\n```\r\n\r\n</details>\r\n\r\n","formgroup":"# FormGroup\r\n\r\n> ##### `export function FormGroup({name, label, type, input, class, bsSize, cols, id, ...props})`\r\n\r\nFormGroup creates a combination of label and input.\r\nThe most important arguments are \"name\", \"label\" and \"type\".\r\nThe value for \"type\" is usually an [\\<input\\> type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types). However, special input fields can either be passed as \"input\" (a van function) or registered in *typeMap* with their own \"type\" ([see example](#align-demo)).\r\nThe \"id\" can be specified, but will be generated automatically if not present.\r\nAll other arguments in \"...props\" are passed to the input element, such as \"oninput\" and \"value\".\r\nThe elements are displayed on top of each other.\r\nIf col is set, they can also be placed next to each other in a row. For example `col: \"2 4\"` uses 2 colums for the label and 4 colums for the input.\r\n\r\n\r\n\r\nSee [FormBuilder Demo](#formbuilder) for example.\r\n\r\n<details>\r\n  <summary>Show FormGroup Code</summary>\r\n\r\n## FormGroup Code\r\n\r\n```javascript\r\nexport function FormGroup({name, label, class: clas, bsSize, cols, id, ...props}) {\r\n    const cl = () => {\r\n        let res = '';\r\n        if(van.val(clas)) res += ' ' + van.val(clas);\r\n        return res;\r\n    }\r\n    let g_id = id ?? Math.random().toString(36).substring(2, 9);\r\n    let i_id = 'i_' + g_id;\r\n    let domInput = input ?? typeMap.get(props.type) ?? Input;\r\n\r\n    if(cols) {\r\n        let [col_l, col_r] = cols.split(' ');\r\n        return [\r\n            FormLabel({bsSize, col: col_l, for: i_id}, label),\r\n            div({\r\n                class: () => {\r\n                    let res = col_r ? `col-${col_r}` : 'col';\r\n                    if(['checkbox','radio','switch'].includes(props.type)) res += ' pt-2';\r\n                    return res;\r\n                }},\r\n                domInput({bsSize, name, id: i_id, ...props})\r\n            )\r\n        ]\r\n    }\r\n\r\n\r\n    return div({class: cl, ...props},\r\n        FormLabel({bsSize, for: i_id}, label),\r\n        domInput({bsSize, name, id: i_id, ...props})\r\n    );\r\n}\r\n```\r\n\r\n</details>\r\n\r\n","home":"# <img src=\"img/form-lib.svg\" alt=\"logo\" height=\"60\">&nbsp; <img src=\"img/vanjs.svg\" alt=\"logo\" height=\"60\"> VanJs Bootstrap Components\r\n\r\n![vanjs](https://img.shields.io/badge/🍦VanJs-1.2-blue)\r\n![bs](https://img.shields.io/badge/Bootstrap-5-blue?logo=bootstrap&logoColor=white)\r\n\r\n----\r\n\r\n> a component library using VanJs and Bootstrap\r\n\r\nFor a long time I built my UIs with React and Bootstrap. Then I met VanJs and am amazed at how easy it is. So that I don't have to mess with CSS, I'm introducing some Bootstrap components here.\r\n\r\n\r\n## Installation\r\n\r\nTo use this library you also need VanJs and Bootstrap.\r\n\r\n```batch\r\nnpm install vanjs-core bootstrap vanjs-bootstrap\r\n```\r\n\r\nmain.js\r\n\r\n```javascrript\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './app.css';\r\nimport 'bootstrap'\r\nimport van from 'vanjs-core';\r\nimport App from './app.js';\r\nconst app = document.querySelector(\"#app\");\r\nvan.add(app, App());\r\n```\r\n\r\n\r\n","i18n":"# i18n\r\n\r\nTranslation tool. A very simple object for multilingual texts. The texts are stored in the variable `dict` and are divided into language and chapter.\r\n\r\nThe current language is set with the `setLanguage` function. The texts are retrieved with the function `t`. Texts are added with the `addWords` function.\r\n\r\n\r\n\r\n\r\n## Interface\r\n\r\n- **dict**  \r\nobject tree structured according to language, chapter and subchapter  \r\n\r\n- **getLanguage**()  \r\n  current language  \r\n\r\n- **setLanguage**(newLanguage)  \r\n\r\n- **t**('category.key')  \r\n  returns the text of the current language to a key. \r\n  the key contains the category, the subcategory and the actual key, separated by a dot  \r\n\r\n- **tPath**('category')  \r\n  returns a `t` function for a category  \r\n\r\n- **addWords**(words, [lang], [chapter])  \r\n  inserts an object tree with texts into the dict  \r\n\r\n\r\n## Example\r\n\r\nCreate a translation instance and add imported JSON files.\r\n\r\n```javascript\r\nimport {I18n}  from 'vanjs-bootstrap';\r\nimport lang_en from './en.json';\r\nimport lang_de from './de.json';\r\n\r\nconst i18n = I18n();\r\n\r\ni18n.addWords( lang_en, 'en' );\r\ni18n.addWords( lang_de, 'de' );\r\n\r\nlet nl = (navigator?.language || 'en').substring(0,2);\r\ni18n.setLanguage(nl);\r\n\r\nconst {t, tPath, getLanguage, setLanguage} = i18n;\r\nexport { t, tPath, getLanguage, setLanguage };\r\n```\r\n\r\n<p/>\r\n\r\nToggle language in your App.\r\n\r\n```javascript\r\nimport van  from 'vanjs-core';\r\nimport { tPath, getLanguage, setLanguage }  from './i18n'\r\n\r\nconst tNav = tPath('nav');  // translate function for chapter 'nav'\r\n\r\nconst lang = van.state(getLanguage());\r\n\r\n// use this in NavBar\r\nconst toggleLanguage = () => a({\r\n    class: \"nav-link\", \r\n    href: \"#\", \r\n    onclick: () => {\r\n        let l = (lang.val === 'en') ? 'de' : 'en'\r\n        setLanguage(l);\r\n        lang.val = l;\r\n        return false;\r\n    },\r\n    title: tNav('lang-title') \r\n    }, \r\n    tNav('lang')\r\n);\r\n\r\n\r\nexport default function App() {\r\n    return () => div(\r\n        {lang: lang.val}, // inject lang will redraw app on language change\r\n        AppNav,\r\n        div({class: \"container\"}, \r\n            div({class: \"row justify-content-md-center\"},\r\n                div({class: \"col-10 p-4 m-2 border rounded-2\"}, \r\n                ctrl.pageDom.val())\r\n            )\r\n        ),\r\n    )\r\n}\r\n```","icons":"# Icons\r\n\r\nIcons, the small images used on buttons or in the text, make the UI appealing and clear. One or more libraries such as Font Awesom, Bootstrap or Simple Icons serve as the source. However, it is not uncommon for additional icons to be required that you create yourself, such as your own logo.\r\n\r\nThe library contains simple functions for displaying and managing icons from different sources.\r\n\r\n## Icon\r\n\r\n> ##### function Icon( anything, {size, ...props} )\r\n\r\nThe function icon displays icons on different sources.\r\n\r\n- **key of a icon in iconMap**  \r\n    anything = 'key'  \r\n\r\n- **UTF-8 char**  \r\n  anything = '🗺️'  \r\n\r\n- **SVG string**  \r\n  `anything = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"3\"/></svg>'`  \r\n\r\n- **modified SVG string**  \r\n  `anything = SvgStrIcon('<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"3\"/></svg>',`  \r\n    `{fill: 'currentColor', stroke: 'currentColor'}));`  \r\n\r\n- **Image URL**  \r\n  anything = ImgIcon({src: \"https://avatars.githubusercontent.com/u/25134550\", class: \"rounded-4\"})  \r\n\r\n- **[react-icon](https://react-icons.github.io/react-icons/) object**  \r\n\r\n```javascript\r\n  anything = GenIcon({tag: \"svg\",attr: {viewBox:\"0 0 30 10\"},child: [  \r\n    {tag: \"circle\", attr: {cx:\"5\", cy:\"5\", r:\"3\", stroke:\"green\"}},  \r\n    {tag: \"circle\", attr: {cx:\"15\", cy:\"5\", r:\"3\", stroke:\"green\", \"stroke-width\": \"3\"}}  \r\n    ]})  \r\n```  \r\n\r\n- **VanJs function**  \r\n\r\n```javascript\r\n  const {path} = van.tagsNS(\"http://www.w3.org/2000/svg\");  \r\n  anything = props => SvgIconBase({viewBox: \"0 0 16 16\", ...props},  \r\n    path({d: \"M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6m0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8M8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0m0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13m8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5M3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8m10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0m-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707M4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z\"})  \r\n  );  \r\n```\r\n\r\n- **Font Awesome class**  \r\n  anything = \"fa-solid fa-beer-mug-empty\"  \r\n\r\n\r\nArgument **size** puts width and height and is a CSS value.\r\n\r\n`size = '16px' || '2.5em' || '60%' || 'inherit'`\r\n\r\nOther '...props' like 'class' or 'style' are passed on.\r\n\r\n---\r\n\r\n## Icon Map\r\n\r\n> ##### export var iconMap = new Map()\r\n\r\nVariable **iconMap** is a JavaScript Map to store icon by key. It is recommended to store icons here and display them with `Icon('key')`.\r\nThe best approach is to create an icon library.\r\n\r\nfile 'icons.js'\r\n\r\n```javascript\r\nimport van from 'vanjs-core';\r\nimport {setIcon, ImgIcon, SvgStrIcon, SvgIconBase} from 'vanjs-bootstrap';\r\nimport FormLogo from './form-lib.svg?raw';\r\n\r\nconst {path} = van.tagsNS(\"http://www.w3.org/2000/svg\");\r\n\r\nconst sun = props => SvgIconBase({viewBox: \"0 0 16 16\", ...props},\r\n    path({d: \"M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6m0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8M8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0m0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13m8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5M3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8m10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0m-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707M4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z\"})\r\n);\r\n\r\nconst Beer = '<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 512 512\" height=\"200px\" width=\"200px\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"32\" d=\"M352 200v240a40.12 40.12 0 01-40 40H136a40.12 40.12 0 01-40-40V224\"></path><path fill=\"none\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"32\" d=\"M352 224h40a56.16 56.16 0 0156 56v80a56.16 56.16 0 01-56 56h-40\"></path><path fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"32\" d=\"M224 256v160m64-160v160M160 256v160m160-304a48 48 0 010 96c-13.25 0-29.31-7.31-38-16H160c-8 22-27 32-48 32a48 48 0 010-96 47.91 47.91 0 0126 9\"></path><path fill=\"none\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"32\" d=\"M91.86 132.43a40 40 0 1160.46-52S160 91 160 96m-14.17-31.29C163.22 44.89 187.57 32 216 32c52.38 0 94 42.84 94 95.21a95 95 0 01-1.67 17.79\"></path></svg>';\r\n\r\n\r\nsetIcon('VANLOGO', ImgIcon({src: \"img/vanjs.svg\"}));\r\nsetIcon('BEER', SvgStrIcon(Beer));\r\nsetIcon('BEER_BLUE', SvgStrIcon(Beer, {fill: 'blue', stroke: 'blue'}));\r\nsetIcon('FORM', SvgStrIcon(FormLogo, {fill: 'currentColor', stroke: 'currentColor'}));\r\nsetIcon('SUN', sun)\r\n\r\n```\r\n\r\nfile 'app.js'\r\n\r\n```javascript\r\nimport van from 'vanjs-core';\r\nimport {Icon} from 'vanjs-bootstrap';\r\nimport './icons';  // initialize iconMap\r\n\r\nconst {div, h1} = van.tags;\r\n\r\nexport default function App() {\r\n    return () => div(\r\n      h1('VanJs ',Icon('VANLOGO'),' is nice'),\r\n    )\r\n}\r\n\r\n```\r\n\r\n> ##### function setIcon (key, icon)\r\n\r\nSets an icon to a key. *icon* should be a function to pass arguments of the function Icon.\r\nIcons can also be derived from other icons.\r\n\r\n`setIcon( 'LOGO', props => Icon('VANLOGO', props) )`\r\n\r\n\r\n> ##### function getIcon (key)\r\n\r\nGets an icon by key.\r\n\r\n\r\n> ##### function setWarning (value)\r\n\r\nThis is useful for debugging. Value is\r\n\r\n- '**get**' logs a warning when a undefined icon should be rendered\r\n- '**all**' logs also if a defined icon is overwritten\r\n- '**off**' disable warnings\r\n\r\n### Show Icons Demo\r\n\r\nUse this Button to display all icons.\r\n\r\n```javascript\r\nimport van from 'vanjs-core';\r\nimport {Button, Modal, Icon, iconMap} from 'vanjs-bootstrap';\r\n\r\nfunction ShowIconMap() {\r\n    const keys  = [...iconMap.keys()];\r\n    const {div} = van.tags;\r\n    const dlg = Modal({\r\n        header: \"Icon Map\",\r\n        body: div(\r\n            ...keys.map( key => div({class: \"row\"},\r\n                div({class: \"col\"}, key ),\r\n                div({class: \"col bg-white text-black\"}, Icon(key) ),\r\n                div({class: \"col bg-black text-white\"}, Icon(key) ),\r\n                div({class: \"col col bg-secondary text-black\"}, Icon(key) ),\r\n            ))\r\n        ),\r\n        scrollable: true,\r\n    });\r\n\r\n    return Button({onclick: ()=>dlg.open()}, \"Show Icons\");\r\n}\r\n```\r\n\r\n## Icon Transformers\r\n\r\n> ##### function SvgIconBase (props = {}, ...children) {\r\n\r\nIs a base component wrapper for SVG icons build as VanJs function.\r\nThe idea behind is to have a SVG image that size is 1em. So it fit to font-size.\r\n\"fill\" should be \"currentColor\" to use the font-color.\r\nThe icon size (width and height) can be changed by \"size\" property.\r\n\r\n**main props**\r\n\r\n- **color** directed to SVG style\r\n- **size** to set SVG width and height\r\n- **class** directed into SVG tag\r\n- **style** directed into SVG tag\r\n- **attr** directed into SVG tag\r\n- **title** inserts a `<title>title</title>` into childrens\r\n\r\n```javascript\r\nfunction MyIcon (props) {\r\n  const {rect} = van.tagsNS(\"http://www.w3.org/2000/svg\");\r\n  return SvgIconBase({viewBox: \"0 0 100 100\", ...props},\r\n    rect({x:\"11.5\", y:\"9.4\", width:\"80\", height:\"80\", rx:\"4.4444\", ry:\"4.4444\" stroke-width:\"8\"})\r\n  )\r\n}\r\n```\r\n\r\n\r\n\r\n> ##### function GenIcon(data)\r\n\r\nThis function returns a Icon function, where data is a svg data tree:\r\n\r\n   `{tag: \"svg\", attr: {viewBox: \"0 0 16 16\"}, child: [{tag: ..}, ..]}`\r\n\r\nThis data format was found by react-icons.\r\nThe advantage is the generality of this format, which can be easily transformed, here into a VanJs function.\r\nThe first tag is usually \"svg\". In this function, if the first tag is missing, \r\nan SvgIconBase function is generated, otherwise a standard SVG function.\r\n\r\n```javascript\r\nconst moon = GenIcon({\r\n  attr: {viewBox: \"0 0 16 16\"},\r\n  child:[\r\n    {tag: 'path', attr: {d: \"M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278M4.858 1.311A7.269 7.269 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.316 7.316 0 0 0 5.205-2.162c-.337.042-.68.063-1.029.063-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286z\"}}\r\n  ]\r\n});\r\n```\r\n\r\n> ##### function ImgIcon ({src, alt, ...rest})\r\n\r\nCreate a Icon function by image url. The \"size\" is injected as style so we can use units like \"em\".\r\nFor original size use \"inherit\".\r\nIf \"alt\" is not specified, the last part of the URL is used for this\r\n\r\n`setIcon( 'KEY', ImgIcon({src: \"img/key.png\"}))``\r\n\r\n\r\n> ##### function SvgStrIcon (str, svgargs = {}) {\r\n\r\nCreate a Icon function from a SVG string. svgargs will overwrite svg attributes like fill and stroke.\r\n\r\n```javascript\r\nSvgStrIcon(\r\n  '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"3\"/></svg>',\r\n  {fill: 'currentColor', stroke: 'currenColor}\r\n)\r\n```\r\n\r\n\r\n","inputcontrols":"# Input Controls\r\n\r\nThe special Bootstrap form controls are implemented in the library and can be imported. In the FormGroup the controls are specified as “type”. The mapping is the Map \"typeMap\".\r\n\r\nA special feature of SelectInput, RadioSelectInput and ComboboxInput is that the options are not specified as children, but as an attribute \"options\". The value here is a list. See [selectOptions](#selectoptions) for details.\r\n\r\n## API\r\n\r\n```javascript\r\nexport function Input({class: clas, bsSize, ...props})\r\n\r\nexport function FormLabel({class: clas, bsSize, col, ...props}, children)\r\n\r\nexport function SelectInput ({class: clas, bsSize, ...props})\r\n\r\nexport function FormCheckInput ({label: clabel, type, class: clas, style, bsSize, reverse, id, value, ...props})\r\n\r\nexport const SwitchInput = props => FormCheckInput({...props, type: 'switch'})\r\n\r\nexport const CheckboxInput = props => FormCheckInput({...props, type: 'checkbox'})`\r\n\r\nexport const RadioInput = props => FormCheckInput({...props, type: 'radio'})\r\n\r\nexport function ComboboxInput (options = [], style, bsSize, onItemClick, ...props)\r\n\r\nexport function RadioSelectInput ({options, class: clas, bsSize, inline, id, ...props})\r\n```\r\n\r\n## typeMap\r\n\r\n\r\n| type | control |\r\n| --- | --- |\r\n| 'text' |            Input |\r\n| 'textarea' |        Input |\r\n| 'select' |          SelectInput |\r\n| 'radioselect' |     RadioSelectInput |\r\n| 'checkbox' |        CheckboxInput |\r\n| 'radio' |           RadioInput |\r\n| 'switch' |          FormCheckInput |\r\n| 'combobox' |        ComboboxInput |\r\n\r\n\r\n","menu":"# Menu\r\n\r\nIn addition to the dropdown menu, a popup menu and a context menu are also implemented based on the modal dialog. The MenuItem function simplifies the creation of menus.\r\n\r\n## MenuItem\r\n\r\n> ##### export function MenuItem ({label, header, divider, text, active, disabled, class, ...props})\r\n\r\nThis function returns dom like\r\n\r\n```html\r\n<li>\r\n    <button class=\"dropdown-item\" role=\"button\" .../>label</button>\r\n</li>\r\n```\r\n\r\n### MenuItem Props\r\n\r\n- **label** the visible button children  \r\n- **header**  boolean  \r\n- **divider** boolean  \r\n- **text** boolean  \r\n- **active** boolean  \r\n- **disabled** boolean  \r\n- **onclick** event function  \r\n\r\n## DropdownMenu\r\n\r\n> ##### export function DropdownMenu (...items)\r\n\r\nFor *items* functions or objects are accepted.\r\n\r\n```javascript\r\n DropdownMenu(\r\n    {label: 'Header', header:1},\r\n    MenuItem({label: 'Menu Item', onclick:()=>result.val='Menu Item'}),\r\n    {label: 'Item1',onclick:()=>result.val='Item1'},\r\n)\r\n```\r\n\r\n### Dropdown Example\r\n\r\n```javascript\r\nconst DropdownDemo = () => {\r\n    const result = van.state(\"\");\r\n    return div({class: \"row\"},\r\n        div({class: \"col-3\"},\r\n            div({class: \"dropdown\"},\r\n                Button({dropdown: true}, \"Dropdown button\"),\r\n                DropdownMenu(\r\n                    {label: 'Header', header:1},\r\n                    {label: 'Item1',onclick:()=>result.val='Item1'},\r\n                    {label: 'active item',active:1,onclick:()=>result.val='active item'},\r\n                    {label: 'Item2',onclick:()=>result.val='Item2'},\r\n                    {divider:1},\r\n                    {label: 'Text',text:1},\r\n                    {label: 'Disabled',disabled:1},\r\n                )\r\n            )\r\n        ),\r\n        div({class: \"col-3\"}, () => `Result: ${result.val}`),\r\n    )\r\n}\r\n```\r\n\r\n## PopupMenu\r\n\r\n> ##### export function PopupMenu (...items)\r\n\r\nFor *items* functions or objects are accepted.\r\nThis function returns a Modal object. Call function *open* to show.\r\n\r\n### Popup Example\r\n\r\n```javascript\r\nconst PopupDemo = () => {\r\n    const result = van.state(\"\");\r\n    return div({class: \"row\"},\r\n        div({class: \"col-3\"},\r\n            Button({\r\n                onclick: () => PopupMenu(\r\n                    {label: 'Popup Menu', header:1},\r\n                    MenuItem({label: 'Menu Item', onclick:()=>result.val='Menu Item'}),\r\n                    {label: 'Item1',onclick:()=>result.val='Item1'},\r\n                    {label: 'active item',active:1,onclick:()=>result.val='active item'},\r\n                    {label: 'Item2',onclick:()=>result.val='Item2'},\r\n                    {divider:1},\r\n                    {label: 'Text',text:1},\r\n                    {label: 'Disabled',disabled:1},\r\n                    ).open()\r\n            }, \"Popup\")\r\n        ),\r\n        div({class: \"col-3\"}, () => \\`Result: \\${result.val}\\`),\r\n    )\r\n}\r\n```\r\n\r\n## ContextMenu\r\n\r\n> ##### export function ContextMenu (...items)\r\n\r\nFor *items* functions or objects are accepted.\r\nThis function returns a Modal object. Call function *open(event)* to show. Function *open* accepts the click event to open the menu at click position.\r\n\r\n### Context Menu Example\r\n\r\n```javascript\r\nconst ContextDemo = () => {\r\n    const result = van.state(\"\");\r\n\r\n    const menu = ContextMenu(\r\n        {label: 'Context Menu', header:1},\r\n        MenuItem({label: 'Menu Item', onclick:()=>result.val='Menu Item'}),\r\n        {label: 'Item1',onclick:()=>result.val='Item1'},\r\n        {label: 'Item2',onclick:()=>result.val='Item2'},\r\n    );\r\n\r\n    return div({class: \"row\"},\r\n        div({\r\n            class: \"col-12 p-4 mt-3 border rounded-2\",\r\n            oncontextmenu: event => menu.open(event),\r\n        },\r\n            h3('right click in this area to open context menu')\r\n        ),\r\n        div({class: \"col-3\"}, () => \\`Result: \\${result.val}\\`),\r\n    )\r\n}\r\n```\r\n","modal":"# Modal\r\n\r\nWork with Bootstrap [Modal](https://getbootstrap.com/docs/5.3/components/modal).\r\n\r\n## ModalFrame\r\n\r\n> ##### `export function ModalFrame (options)`\r\n\r\nThe function ModalFrame creates a complete modal dom struture like:\r\n\r\n```html\r\n<div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h1 class=\"modal-title fs-5\" id=\"exampleModalLabel\">Modal title</h1>\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <p>Modal body text goes here.</p>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n        <button type=\"button\" class=\"btn btn-primary\">Save changes</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nYou only need to specify the van functions for header, body and footer:\r\n\r\n```javascript\r\ndiv(\r\n    // Button trigger modal\r\n    Button({\"data-bs-toggle\": \"modal\", \"data-bs-target\": \"#exampleModal\"}, \"Launch demo modal\"),\r\n\r\n    // Modal\r\n    ModalFrame({\r\n        id:      \"exampleModal\",\r\n        header:  \"Modal title\",\r\n        body:    \"Modal body text goes here.\",\r\n        footer:  div(\r\n            Button({\"data-bs-dismiss\": \"modal\"}, 'Close'),\r\n            Button({color: \"primary\"}, 'Save changes'),\r\n        )\r\n    })\r\n);\r\n```\r\n\r\n## ModalFrame Options\r\n\r\n- **header**  \r\n  **body**  \r\n  **footer**  \r\n  A van dom function or null.  \r\n\r\n- **id**  \r\n  An optional dialog id.  \r\n\r\n- **close**  \r\n  A boolean value for the close cross in header. Default is true.  \r\n\r\n- **centered**  \r\n  A boolean value for centered dialog position. Default is true.  \r\n\r\n- **scrollable**  \r\n  A boolean value for scrollable dialog. Default is false.  \r\n\r\n- **color**  \r\n  A Bootstrap color name.  \r\n  `color: \"warning\"`\r\n\r\n- **position**  \r\n  A optional position object like `{left: 100, top: 50}`  \r\n\r\n- **width**  \r\n  A optional diallog width like \"20em\" or \"fit-content\"  \r\n\r\n- **class**  \r\n  An additional class  \r\n\r\n<br/>\r\n\r\n## Modal Controller\r\n\r\nYou can achieve more flexibility by using the Modal function.\r\n\r\n> ##### `export function Modal (args, options)`\r\n\r\nWhere **args** are the options used for ModalFrame and **options** are controller options.\r\nThe function returns an object with properties and functions.\r\n\r\n### Modal Controller Object\r\n\r\n- **dom**  \r\n  The ModalFrame dom  \r\n\r\n- **isOpen**  \r\n  A boolean value  \r\n\r\n- **modalResult**  \r\n  A value that corresponds to the argument of the close function.  \r\n\r\n- **open (left,top)**  \r\n  Function to open the dialog at a given (optional) position  \r\n\r\n- **async asyncOpen (left,top)**  \r\n  Function to open the dialog asynchron and returns modalResult when closed.  \r\n\r\n- **close (result)**  \r\n  Function to close the dialog with optional modalResult.  \r\n\r\n- **dispose ()**  \r\n  Funtion to remove the dialog from dom.  \r\n  \r\n- **show ()**  \r\n  Show the dialog.  \r\n\r\n- **hide (dispose)**  \r\n  Hide the dialog.  \r\n\r\nYou can also use the bootstrap [events](https://getbootstrap.com/docs/5.3/components/modal/#events)\r\n\r\n##### `dom.addEventListener('shown.bs.modal', onShown)`\r\n\r\n### Modal Controller Options\r\n\r\n- **backdrop**  \r\n  boolean, default true.  \r\n  Includes a modal-backdrop element.  \r\n  Alternatively, specify static for a backdrop which doesn’t close the modal when clicked.  \r\n  \r\n- **focus**  \r\n  boolean, default true  \r\n  Puts the focus on the modal when initialized.  \r\n\r\n- **keyboard**  \r\n  boolean, default true  \r\n  Closes the modal when escape key is pressed.  \r\n  \r\n- **dispose**  \r\n  boolean, default true  \r\n  Dispose dialog on hide.  \r\n\r\n<br/>\r\n\r\n### Confirm Example\r\n\r\n```javascript\r\nconst ConfirmDlg = Modal({\r\n    close: false,               // don't show any header\r\n    color: \"text-bg-danger\",\r\n    centered: false,\r\n    body: h5(\"Are you sure ?\"),\r\n    footer: div({class: \"\"},\r\n        Button({onclick: ()=>ConfirmDlg.close(true), bsSize: \"sm\", class: \"me-2\"}, 'Yes'),\r\n        Button({onclick: ()=>ConfirmDlg.close(false), bsSize: \"sm\"}, 'No'),\r\n    )\r\n});\r\n\r\nconst DemoConfirm = () => {\r\n    const result = van.state(\"\");\r\n    return div({class: \"row\"},\r\n        div({class: \"col-3\"},\r\n            Button({\r\n                onclick: async () => {\r\n                    result.val = await ConfirmDlg.asyncOpen();\r\n                }\r\n            }, \"Confirm\")\r\n        ),\r\n        div({class: \"col-3\"}, () => `Result: ${result.val}`),\r\n    )\r\n}\r\n```\r\n\r\n\r\n### Form Example\r\n\r\n```javascript\r\n\r\nconst LoginDlg = ({name, pw}) => {\r\n    var fb = FormBuilder();\r\n    fb.add({label: 'Name', name: 'name', value: name, id: 'login-dlg-name'});\r\n    fb.add({label: 'Password', name: 'pw', value: pw, type: 'password'});\r\n\r\n    var dlg = Modal({\r\n        header: 'Login',\r\n        body: fb.dom,\r\n        footer: div({class: \"btn-group btn-group-sm\"},\r\n            Button({onclick: ()=>dlg.close(fb.values)}, 'Ok'),\r\n            Button({onclick: ()=>dlg.close(false)}, 'Cancel'),\r\n        )\r\n    });\r\n\r\n    // close on Enter pressed\r\n    fb.dom.addEventListener('keypress', event => {\r\n        if (event.key === 'Enter') dlg.close(fb.values);\r\n    });\r\n\r\n    // focus first input after open\r\n    dlg.onShown = () => {\r\n        document.getElementById('i_login-dlg-name').focus()\r\n    };\r\n\r\n    return dlg;\r\n};\r\n\r\nconst DemoForm = () => {\r\n    const result = van.state({name: 'Jack', pw: 'secret'});\r\n    return div({class: \"row\"},\r\n        div({class: \"col-3\"},\r\n            Button({onclick: async () => {\r\n                let res = await LoginDlg(result.val).asyncOpen();\r\n                if (res) result.val = res;\r\n            }\r\n            }, \"Login\")\r\n        ),\r\n        div({class: \"col-3\"}, () => `Result: ${JSON.stringify(result.val)}`),\r\n    )\r\n}\r\n\r\n```\r\n","navbar":"# Navbar\r\n\r\nThis component simplifies the use of the Bootstrap [navigation bar](https://getbootstrap.com/docs/5.3/components/navbar/).\r\n\r\n```javascript\r\nfunction Navbar({class: clas, sticky = true, menu, t = t=>t, ...props})\r\n\r\nfunction NavItem({href='#', label, icon, items, level=0, Comp, hidden=false, t=t=>t, ...props})\r\n\r\nfunction NavLink({label, class: clas, active, disabled, divider, level=0, ...props})\r\n\r\nfunction NavMenu ({label, items, t=t=>t, level, ...props})\r\n```\r\n\r\n## Navbar Arguments\r\n\r\n- **class**  \r\n  optional class string or van.state for the \\<nav\\> element  \r\n\r\n- **sticky**  \r\n  add 'sticky-top' to class  \r\n\r\n- **t**  \r\n  optional translation function for labels and titles  \r\n\r\n- **menu**  \r\n  The **menu** is an object with properties [**brand**](https://getbootstrap.com/docs/5.3/components/navbar/#brand), a dom element and **items**, the array of menu items.  \r\n  See example below  \r\n\r\n## item props\r\n\r\nThe object 'item' is passed as an argument to the function NavItem.\r\n\r\n- **label**  \r\n  A string, function or van.state  \r\n\r\n- **href**  \r\n  Optional url, default is '#'  \r\n\r\n- **icon**  \r\n  Not supported  \r\n\r\n- **items**  \r\n  A array of items. The item is a submenu when set  \r\n\r\n- **Comp**  \r\n  A optional function returning a van dom, preferably an NavLink element  \r\n  All properties are passed to the function as an argument  \r\n\r\n- **hidden**  \r\n  item is not visible when true  \r\n\r\n- **t**  \r\n  Optional translation function for labels and titles \r\n\r\n- **active**  \r\n  Add 'active' to class when true.. Can be a van.state.  \r\n\r\n- **disabled**  \r\n  Add 'disabled' to class. Can be a van.state.  \r\n\r\n- **divider**  \r\n  Shows a divider in submenu  \r\n\r\n- **...props**  \r\n  Additional properties are passed on  \r\n\r\n\r\n\r\n## Usage Examples\r\n\r\nSee nav bar above in this app.\r\n\r\n#### App Code\r\n\r\n```javascript\r\nimport van from 'vanjs-core';\r\nimport Navbar from 'vanjs-bootstrap';\r\nimport ToggleTheme from './app/toggle-theme';\r\nimport Page from './app/home';\r\nimport {tPath} from './i18n';\r\n\r\nconst {div} = van.tags;\r\n\r\nconst appMenu = {\r\n\r\n    brand: van.tags.a({ class: \"nav-brand me-3\", href: \"#\", onclick: ()=>false },\r\n            van.tags.img({ src: \"img/form-lib.svg\", alt: \"Home\", height: \"30\" }),\r\n    ),\r\n    \r\n    items: [\r\n        {label: 'home', href: '#home'},\r\n        {label: 'Form', items: [\r\n            {label: 'formbuilder', href: '#formbuilder'},\r\n            {label: 'aligndemo', href: '#aligndemo'},\r\n        ]},\r\n        {label: 'about', href: '#about'},\r\n        {label: 'theme', Comp: ToggleTheme},\r\n    ]\r\n}\r\n\r\n\r\nfunction AppNav () {\r\n    return Navbar({t: tPath('nav'), menu: appMenu})\r\n}\r\n\r\nexport default function App() {\r\n    return () => div(\r\n        AppNav,\r\n        div({class: \"container\"},\r\n            Page\r\n        )\r\n    )\r\n}\r\n\r\n```\r\n\r\n#### ToggleTheme Code\r\n\r\n```javascript\r\nimport van from 'vanjs-core';\r\nimport {NavLink} from 'vanjs-bootstrap';\r\nimport {tPath} from '../i18n';\r\n\r\nconst {svg, path} = van.tagsNS(\"http://www.w3.org/2000/svg\");\r\n\r\nconst sun = svg({width: \"1em\", height: \"1em\", fill: \"currentColor\", viewBox: \"0 0 16 16\"},\r\n    path({d: \"M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6m0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8M8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0m0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13m8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5M3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8m10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0m-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707M4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z\"})\r\n);\r\nconst moon = svg({width: \"1em\", height: \"1em\", fill: \"currentColor\", viewBox: \"0 0 16 16\"},\r\n    path({d: \"M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278M4.858 1.311A7.269 7.269 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.316 7.316 0 0 0 5.205-2.162c-.337.042-.68.063-1.029.063-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286z\"})\r\n);\r\n\r\nexport default function ToggleTheme () {\r\n    const t = tPath('theme');\r\n    const toggle = (v) => v === 'dark' ? 'light' : 'dark';\r\n    const getTheme = () => document.documentElement.getAttribute('data-bs-theme');\r\n    const setTheme = (v) => document.documentElement.setAttribute('data-bs-theme', v);\r\n    const btnColor = van.state(toggle(getTheme()));\r\n    const toggleClick = () => {\r\n        btnColor.val = toggle(btnColor.val);\r\n        setTheme(toggle(getTheme()));\r\n        return false;\r\n    }\r\n    const Icon = v => v === 'dark' ? sun : moon;\r\n\r\n    return NavLink({\r\n        label: Icon(btnColor.val), \r\n        onclick: toggleClick,\r\n        title: t(`${btnColor.val}-title`),\r\n    });\r\n}\r\n```\r\n\r\n","page-button":"# Button\r\n\r\n> ##### `export function Button ({bsSize, class, color='secondary', outline, dropdown, ...props}, children)`\r\n\r\nImplements a Bootstrap [button](https://getbootstrap.com/docs/5.3/components/buttons/)\r\n\r\n## Demo Code\r\n\r\n```javascript\r\nimport van from 'vanjs-core';\r\nimport { Button, CheckboxInput, Input, RadioSelectInput, SelectInput } from 'vanjs-bootstrap';\r\n\r\nconst { div, h2, span } = van.tags;\r\n\r\nvar bsSize = van.state('md');\r\nvar color = van.state('secondary');\r\nvar disabled = van.state(false);\r\nvar outline = van.state(false);\r\nvar dropdown = van.state(false);\r\nvar label = van.state(\"Button\");\r\n\r\nexport default function Page() {\r\n\r\n    const OptionsBar = div(\r\n        div({ class: \"input-group input-group-sm\" },\r\n            span({ class: \"input-group-text\" }, 'bsSize'),\r\n            RadioSelectInput({\r\n                value: bsSize.val,\r\n                oninput: e => bsSize.val = e.target.value,\r\n                options: 'sm,md,lg', inline: true,\r\n            }),\r\n\r\n            span({ class: \"input-group-text\" }, 'color'),\r\n            SelectInput({\r\n                value: color.val,\r\n                oninput: e => color.val = e.target.value,\r\n                options: ',primary,secondary,success,danger,warning,info,light,dark,link',\r\n            }),\r\n\r\n            span({ class: \"input-group-text\" }, 'outline'),\r\n            CheckboxInput({ value: outline.val, oninput: e => outline.val = e.target.value, class: \"form-control\", style: \"max-width: 2em\" }),\r\n\r\n            span({ class: \"input-group-text\" }, 'disabled'),\r\n            CheckboxInput({ value: disabled.val, oninput: e => disabled.val = e.target.value, class: \"form-control\", style: \"max-width: 2em\" }),\r\n\r\n            span({ class: \"input-group-text\" }, 'dropdown'),\r\n            CheckboxInput({ value: dropdown.val, oninput: e => dropdown.val = e.target.value, class: \"form-control\", style: \"max-width: 2em\" }),\r\n        ),\r\n    );\r\n\r\n    return div({},\r\n        div({class: \"row\"},\r\n            h2('Button Demo'),\r\n            OptionsBar,\r\n            div({class: \"col\"},\r\n                Button({ bsSize, color, outline, disabled, dropdown, class: \"mt-3\" }, label),\r\n            ),\r\n        ),\r\n    )\r\n}\r\n```\r\n","selectoptions":"# SelectOptions\r\n\r\n`function selectOptions (list, dom=false, selected)`\r\n\r\nAll form controls in this library use the selectOptions function. This converts different kind of lists into a uniform format that can easily be mapped into a dom.\r\nIs the `dom` parameter `true`, the function returns a ready mapped dom `option` list.\r\n\r\nThe `list` parameter accepts four notations:\r\n\r\n1. `'TextValue1,TextValue2'`  \r\n  a komma separated list\r\n2. `['TextValue1', 'TextValue2'...]`  \r\n  a array of values\r\n3. `[['Text1', Value1], ['Text2', Value2]...]`  \r\n  a array of display / value pairs\r\n4. `[ {\r\n     value: 1,\r\n     ['children' || 'text' || 'displayValue']\r\n}`  \r\n  a array of objects\r\n\r\nNotations can be mixed inside a array.\r\n\r\nFor example `[ '', ['text 1', 1], ['text 2', 2] ]` will be converted to:\r\n\r\n```javascript\r\n[\r\n  {\r\n    value: '',\r\n    children: '',\r\n  },\r\n  {\r\n    value: 1,\r\n    children: 'text 1',\r\n  },\r\n  {\r\n    value: 2,\r\n    children: 'text 2',\r\n  }\r\n]\r\n```\r\n\r\nand with `dom=true` and `selected: \"1\"`:\r\n\r\n```javascript\r\n[\r\n option({value=\"\"}),\r\n option({value=\"1\", selected: true}, \"text 1\"),\r\n option({value=\"2\"}, \"text 2\"),\r\n]\r\n```\r\n\r\nan other example:\r\n\r\n```javascript\r\nimport {selectOptions} from 'lib';\r\n..\r\nreturn input({type: 'select', value: fontName}, selectOptions(fontNames, true, fontName))\r\n```\r\n"},"directory":[{"text":"Home","href":"#home","title":"Home"},{"text":"Button","href":"#page-button"},{"text":"Form"},[{"text":"FormController","href":"#formcontroller"},{"text":"FormGroup","href":"#formgroup"},{"text":"FormBuilder","href":"#formbuilder"},{"text":"Input Controls","href":"#inputcontrols"},{"text":"Custom Input","href":"#custominput"}],{"text":"Navbar","href":"#navbar"},{"text":"Modal","href":"#modal"},{"text":"Menu","href":"#menu"},{"text":"Tools"},[{"text":"Icons","href":"#icons"},{"text":"selectOptions","href":"#selectoptions"},{"text":"i18n","href":"#i18n"}]]}